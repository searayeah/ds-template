[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
name = "ds-template"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
ipywidgets = "^8.1.5"
jupyterlab = "^4.2.5"
pandas = "^2.2.3"
openpyxl = "^3.1.4"      # for xlsx
numpy = "^2.1.2"
scipy = "^1.14.1"
tqdm = "^4.66.5"
pandarallel = "^1.6.5"
python-dotenv = "^1.0.1"
# vis
seaborn = { version = "^0.13.2", optional = true }
matplotlib = { version = "^3.9.2", optional = true }
plotly = { version = "^5.24.1", optional = true }
# ml
scikit-learn = { version = "^1.5.2", optional = true }
catboost = { version = "^1.2.5", optional = true }
umap-learn = { version = "^0.5.6", optional = true }
optuna = { version = "^4.0.0", optional = true }
iterative-stratification = { version = "^0.1.8", optional = true }
# image
scikit-image = { version = "^0.24.0", optional = true }
opencv-python = { version = "^4.8.1.78", optional = true }
pillow = { version = "^10.4.0", optional = true }
# torch
torch = { version = "^2.3.0", optional = true }
torchvision = { version = "^0.18.0", optional = true }
torcheval = { version = "^0.0.7", optional = true }
torchaudio = { version = "^2.3.0", optional = true }
lightning = { version = "^2.4.0", optional = true }
# hf
transformers = { version = "^4.45.1", optional = true }
datasets = { version = "^3.0.1", optional = true }
evaluate = { version = "^0.4.3", optional = true }
accelerate = { version = "^0.34.2", optional = true }
# parse
beautifulsoup4 = { version = "^4.12.3", optional = true }
fake-useragent = { version = "^1.5.1", optional = true }
requests = { version = "^2.32.3", optional = true }
# log
wandb = { version = "^0.18.3", optional = true }
loguru = { version = "^0.7.2", optional = true }
hydra-core = { version = "^1.3.2", optional = true }
omegaconf = { version = "^2.3.0", optional = true }
# onnx
onnxscript = { version = "^0.1.0.dev20241007", optional = true }
onnxruntime = { version = "^1.19.2", optional = true }
onnx = { version = "^1.17.0", optional = true }
skl2onnx = { version = "^1.17.0", optional = true }
# nlp
sentencepiece = { version = "^0.2.0", optional = true }
nltk = { version = "^3.9.1", optional = true }
pymorphy2 = { version = "^0.9.1", optional = true }
pymystem3 = { version = "^0.2.0", optional = true }
# ts
statsmodels = "^0.14.4"
# server
python-telegram-bot = { extras = [
  "job-queue",
], version = "^21.3", optional = true }
fastapi = { version = "^0.115.0", optional = true }
aiohttp = { version = "^3.10.9", optional = true }

[tool.poetry.extras]
vis = ["seaborn", "matplotlib", "plotly"]
ml = [
  "scikit-learn",
  "catboost",
  "umap-learn",
  "optuna",
  "iterative-stratification",
]
image = [
  "scikit-image",
  "opencv-python",
  "pillow",
  "albumentations", # to-do add albumenations, when its ready to numpy 2.0
]
torch = ["torch", "torchvision", "torcheval", "torchaudio", "lightning"]
hf = ["transformers", "datasets", "evaluate", "accelerate"]
parse = ["beautifulsoup4", "fake-useragent", "requests"]
log = ["wandb", "loguru", "hydra-core", "omegaconf"]
onnx = ["onnxscript", "onnxruntime", "onnx", "skl2onnx"]
nlp = ["sentencepiece", "nltk", "pymorphy2", "pymystem3"]
ts = ["statsmodels"]
server = ["python-telegram-bot", "fastapi", "aiohttp"]

[tool.poetry.group.dev.dependencies]
# do not add DVC to poetry, it is too slow
# linting and formatting
pre-commit = "^4.0.0"
# for vscode and helix
isort = "^5.13.2"
black = "^24.8.0"
flake8 = "^7.1.1"
flake8-bugbear = "^24.8.19"
flake8-simplify = "^0.21.0"
flake8-pyproject = "^1.2.3"
ruff = "^0.6.9"
mypy = "^1.11.2"            # basedmypy? xd
pylint = "^3.3.1"
# useless libs finder
deptry = "^0.20.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.24.0"

[tool.poetry.group.stubs.dependencies]
# stubs for mypy type checking and code completions
typing-extensions = "^4.12.2"
pandas-stubs = "^2.2.2.240909"
types-pillow = "^10.2.0.20240822"
types-beautifulsoup4 = "^4.12.0.20240907"
types-tqdm = "^4.66.0.20240417"
types-seaborn = "^0.13.2.20240813"
types-requests = "^2.32.0.20240914"
types-pyyaml = "^6.0.12.20240917"
types-regex = "^2024.9.11.20240912"
types-openpyxl = "^3.1.5.20240918"
types-pygments = "^2.18.0.20240506"
types-colorama = "^0.4.15.20240311"
types-decorator = "^5.1.8.20240310"
types-jsonschema = "^4.23.0.20240813"
types-protobuf = "^5.28.0.20240924"
types-psutil = "^6.0.0.20240901"
types-setuptools = "^75.1.0.20240917"
types-six = "^1.16.21.20240513"
types-tabulate = "^0.9.0.20240106"

# [tool.bandit]
# exclude_dirs = ["tests"]

# [tool.bandit.assert_used]
# skips = [
#   '*_test.py',
#   'test_*.py',
# ]

# [tool.yamlfix]
# comments_min_spaces_from_content = 1
# explicit_start = false
# none_representation = "null"
# quote_representation = "\""
# section_whitelines = 1
# whitelines = 1
# preserve_quotes = true               # unless quote_representation bug is fixed

[tool.black]
line-length = 90
target-version = ["py312"]
# skip-magic-trailing-comma = true

[tool.isort]
profile = "black"
line_length = 90
float_to_top = true
known_third_party = ["wandb"]

[tool.autoflake]
expand-star-imports = true
remove-all-unused-imports = true
ignore-init-module-imports = true
remove-duplicate-keys = true
remove-unused-variables = true
recursive = true
in-place = true

[tool.flake8]
max-line-length = 90
extend-ignore = ["E203"] # Whitespace before ':' for black compatability

[tool.pylint]
py-version = "3.12"
max-line-length = 90
disable = [
  "C0116", # documentation
  "C0114", # documentation
  "C0115", # documentation
]

[tool.mypy]
python_version = "3.12"
strict = false            # it's too strict to be useful
show_error_context = true
pretty = true
# ignore_missing_imports = true # ignore packages without type-checking

[tool.ruff]
target-version = "py312"
line-length = 90

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN101",  # annotationg self in class methods, will be deprecated
  "ANN102",  # annotationg cls in class methods, will be deprecated
  "COM812",  # missing-trailing-comma
  "D",       # documentation
  "FA100",   # future-annotations
  "NPY002",  # numpy random stuff
  "PLR0913", # too many init arguments
  "RUF012",  # mutable class attributes type checking
  "T201",    # print statements
]
